# -*- coding: utf-8 -*-
"""Untitled25.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nDzjMTbSYDjVlZ3RXInhRBxQxaZ1IRNh
"""

import numpy as np

random_matrices = [np.random.rand(5000, 5000) for _ in range(500)]

constant_matrix = np.ones((5000, 5000))

from concurrent.futures import ThreadPoolExecutor
import time

def multiply_matrices(matrices, constant_matrix, num_threads):
    results = []

    def multiply(matrix):
        return np.dot(matrix, constant_matrix)

    start_time = time.time()
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        results = list(executor.map(multiply, matrices))
    end_time = time.time()

    return results, end_time - start_time

thread_counts = [1, 2, 3, 4, 5, 6, 7, 8]
execution_times = []

for threads in thread_counts:
    _, time_taken = multiply_matrices(random_matrices, constant_matrix, threads)
    execution_times.append(time_taken)

for t, time_taken in zip(thread_counts, execution_times):
    print(f"Threads: {t}, Time Taken: {time_taken:.2f} minutes")

import psutil

def monitor_cpu_usage():
    # Capture CPU usage
    return psutil.cpu_percent(interval=1, percpu=True)

# Example: Print CPU usage for 1 second
print(monitor_cpu_usage())

import matplotlib.pyplot as plt

# Plot execution times
plt.figure(figsize=(10, 6))
plt.plot(thread_counts, execution_times, marker='o', label='Execution Time')
plt.title("Execution Time vs Number of Threads")
plt.xlabel("Number of Threads")
plt.ylabel("Time Taken (minutes)")
plt.grid(True)
plt.legend()
plt.show()

import pandas as pd

# Create a DataFrame
results_table = pd.DataFrame({
    "Threads": thread_counts,
    "Time Taken (min)": execution_times
})

print(results_table)

# Example CPU usage plot
cpu_usage = [monitor_cpu_usage() for _ in range(8)]  # Simulating for 8 threads

plt.figure(figsize=(10, 6))
for i, usage in enumerate(cpu_usage):
    plt.plot(usage, label=f"CPU {i}")

plt.title("CPU Usage Over Time")
plt.xlabel("Time (s)")
plt.ylabel("CPU Usage (%)")
plt.legend()
plt.grid(True)
plt.show()